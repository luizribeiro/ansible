#!/bin/sh

PROJECT_ROOT=$(dirname $(dirname $(realpath $0)))

. $PROJECT_ROOT/scripts/lib/getoptions.sh
. $PROJECT_ROOT/scripts/lib/getoptions_help.sh

parser_definition() {
  setup REST help:usage -- \
    "Usage: ${2##*/} [options] [arguments]"
  param NAME -n --name init:="devvm" -- \
    "name of the virtual machine" \
    "(default: devvm)"
  param BOX -b --box init:="luizribeiro/arch-base" -- \
    "vagrant box to be used" \
    "(default: luizribeiro/arch-base)"
  param PLAYBOOK -p --playbook init:="devvm.yaml" -- \
    "ansible playbook to use for provisioning" \
    "(default: devvm.yaml)"
  param MEMORY -m --memory init:="1024" -- \
    "RAM size for the virtual machine (in MB)" \
    "(default: 1024)"
  param CPUS -c --cpus init:="2" -- \
    "number of CPUs available to the VM" \
    "(default: 2)"
  disp :usage -h --help
}

eval "$(getoptions parser_definition parse "$0")"
parse "$@"

read -r -d '' VAGRANTFILE <<'EOF'
# vim: set ft=ruby:

Vagrant.configure("2") do |config|
  config.vm.box = "<<BOX>>"
  config.vm.define "<<NAME>>"
  config.vm.hostname = "<<NAME>>"

  config.ssh.keys_only = false
  config.ssh.forward_agent = true
  config.ssh.extra_args = [
    "-o",
    "RemoteForward /run/user/1001/gnupg/S.gpg-agent /Users/luiz/.gnupg/S.gpg-agent.extra",
  ]

  config.vm.provider "virtualbox" do |v|
    v.memory = <<MEMORY>>
    v.cpus = <<CPUS>>
  end

  config.vm.provision "ansible" do |ansible|
    vagrant_root = File.dirname(__FILE__)

    ansible.playbook = "#{vagrant_root}/../../<<PLAYBOOK>>"
    ansible.config_file = "#{vagrant_root}/../../ansible.cfg"

    ansible.groups = {
      "secrets" => ["<<NAME>>"],
    }
  end
end
EOF
VAGRANTFILE=$(echo "$VAGRANTFILE" | sed "s#<<BOX>>#$BOX#g")
VAGRANTFILE=$(echo "$VAGRANTFILE" | sed "s#<<NAME>>#$NAME#g")
VAGRANTFILE=$(echo "$VAGRANTFILE" | sed "s#<<PLAYBOOK>>#$PLAYBOOK#g")
VAGRANTFILE=$(echo "$VAGRANTFILE" | sed "s#<<MEMORY>>#$MEMORY#g")
VAGRANTFILE=$(echo "$VAGRANTFILE" | sed "s#<<CPUS>>#$CPUS#g")

mkdir -p "$PROJECT_ROOT/vms/$NAME"
echo "$VAGRANTFILE" > "$PROJECT_ROOT/vms/$NAME/Vagrantfile"

cd "$PROJECT_ROOT/vms/$NAME"
vagrant destroy || exit 1
vagrant box update
vagrant up
vagrant ssh -p "$NAME"
